/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/odhlar Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h                , 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 3.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h                 , 'time'    ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h                 , 'time'    ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }
    
    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }
    
    withName:AMRFINDERPLUS_RUN {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:BBDUK {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 14.GB * task.attempt, 'memory'  ) } //needs min 14GB for bbduk
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:BBMAP_REFORMAT {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 11.GB  * task.attempt, 'memory'  ) } // minimum of 11GB required
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:FASTP {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 5.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:FASTP_SINGLES {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 3.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:FASTQC {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:'GAMMA|GAMMAS' {
        cpus   = { check_max( 3                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:KRAKEN2_KRAKEN2 {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:MULTIQC {
        cpus   = { check_max( 1                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:PROKKA {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:SPADES {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 14.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }
}