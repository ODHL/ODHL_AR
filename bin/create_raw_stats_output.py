#!/usr/bin/env python3

import argparse
from argparse import ArgumentParser

# Function to get the script version
def get_version():
    return "2.0.0"

def parse_cmdline():
    """Parse command-line arguments for script."""
    parser = ArgumentParser(prog="create_raw_stats.py", description="""Collect stats from FASTQ quality metrics files.
    
    This script reads statistics from two input files generated by the q30.py script and produces a summary output file.
    """)
    parser.add_argument("-r1", "--r1_stats", dest="r1_stats", required=True, help="Text file with R1 stats, from q30.py script.")
    parser.add_argument("-r2", "--r2_stats", dest="r2_stats", required=True, help="Text file with R2 stats, from q30.py script.")
    parser.add_argument("-n", "--name", dest="name", required=True, help="Sample name.")
    parser.add_argument('--version', action='version', version=get_version(), help="Show the version of the script.")
    return parser.parse_args()

def write_raw_stats(raw_R1_reads, raw_R1_bases, Q20_R1_bp, Q20_R1_percent, 
                    Q30_R1_bp, Q30_R1_percent, raw_R2_reads, raw_R2_bases, 
                    Q20_R2_bp, Q20_R2_percent, Q30_R2_bp, Q30_R2_percent, 
                    output_file, name):
    """Creates a QC output file from parsed outputs of q30.py files."""
    with open(output_file, 'w') as f:
        header = ('Name\tR1[reads]\tR1[bp]\tR2[reads]\tR2[bp]\tQ20_Total_[bp]\t'
                  'Q30_Total_[bp]\tQ20_R1_[bp]\tQ20_R2_[bp]\tQ20_R1_[%]\t'
                  'Q20_R2_[%]\tQ30_R1_[bp]\tQ30_R2_[bp]\tQ30_R1_[%]\t'
                  'Q30_R2_[%]\tTotal_Sequenced_[bp]\tTotal_Sequenced_[reads]\n')
        f.write(header)
        
        Q20_Total = Q20_R1_bp + Q20_R2_bp
        Q30_Total = Q30_R1_bp + Q30_R2_bp
        Total_Sequenced_bp = raw_R1_bases + raw_R2_bases
        Total_Sequenced_reads = raw_R1_reads + raw_R2_reads
        
        line = (f"{name}\t{raw_R1_reads}\t{raw_R1_bases}\t{raw_R2_reads}\t{raw_R2_bases}\t"
                f"{Q20_Total}\t{Q30_Total}\t{Q20_R1_bp}\t{Q20_R2_bp}\t"
                f"{Q20_R1_percent}\t{Q20_R2_percent}\t{Q30_R1_bp}\t"
                f"{Q30_R2_bp}\t{Q30_R1_percent}\t{Q30_R2_percent}\t"
                f"{Total_Sequenced_bp}\t{Total_Sequenced_reads}\n")
        f.write(line)

def get_raw_stats(stats):
    """Extracts raw statistics from the provided stats file."""
    with open(stats) as f:
        lines = f.readlines()
        if len(lines) < 6:
            raise ValueError(f"File {stats} does not contain enough lines for expected stats.")

        raw_reads = int(lines[0].strip().replace("total reads: ", ""))
        raw_bases = int(lines[1].strip().replace("total bases: ", ""))
        Q20_bp = int(lines[2].strip().replace("q20 bases: ", ""))
        Q30_bp = int(lines[3].strip().replace("q30 bases: ", ""))
        Q20_percent = str(round(float(lines[4].strip().replace("q20 percentage: ", "")) / 100, 4))
        Q30_percent = str(round(float(lines[5].strip().replace("q30 percentage: ", "")) / 100, 4))

    return raw_reads, raw_bases, Q20_bp, Q20_percent, Q30_bp, Q30_percent

def all_raw_stats(r1_stats, r2_stats, name):
    """Generates a summary output of trimmed info."""
    raw_output = f"{name}_raw_read_counts.txt"
    
    raw_R1_reads, raw_R1_bases, Q20_R1_bp, Q20_R1_percent, Q30_R1_bp, Q30_R1_percent = get_raw_stats(r1_stats)
    raw_R2_reads, raw_R2_bases, Q20_R2_bp, Q20_R2_percent, Q30_R2_bp, Q30_R2_percent = get_raw_stats(r2_stats)

    write_raw_stats(raw_R1_reads, raw_R1_bases, Q20_R1_bp, Q20_R1_percent, 
                    Q30_R1_bp, Q30_R1_percent, raw_R2_reads, raw_R2_bases, 
                    Q20_R2_bp, Q20_R2_percent, Q30_R2_bp, Q30_R2_percent, 
                    raw_output, name)

def main():
    args = parse_cmdline()
    all_raw_stats(args.r1_stats, args.r2_stats, args.name)

if __name__ == '__main__':
    main()
